---
description: Application rules
globs:
alwaysApply: true
---

## General

- Always use brazilian portuguese for user interface texts.
- Always use english for code, comments, etc.

## Code style

- **EVERY FILE** should be formatted with prettier.
- **EVERY FILE** should be linted with eslint.
- **EVERY FILE** should be type checked with typescript.
- COMMENTS should not exist in the code created. You should always use the code to explain what you are doing, with good variable and function names, split of concerns, etc.
- **EVERY** link should use the Link component from react-router-dom and use the ROUTES object to build the path.

## Components

- When creating components, you should analyze if its a global or a local component.
- Before creating a component, you should check if it already exists.
- Before creating a component, you should prioritize components from shadcn/ui.
- On creating a component, you should prioritize composition patterns.
- If its a global component, you should create it in the `src/components` folder.
- If its a local component, you should create it in the `src/modules/<module-name>/components` folder.
- **EVERY REACT COMPONENT** should be a arrow function.
- **EVERY REACT COMPONENT** should be typed as a FC. Similar to the following example:

  ```tsx
  import type { FC } from 'react';

  const Component: FC = () => {
    return <div>Component</div>;
  };
  ```

  ```tsx
  import type { FC } from 'react';

  type Props = {
    prop: string;
  };

  const Component: FC<Props> = ({ prop }) => {
    return <div>Component</div>;
  };
  ```

## Modules

- Modules represent a business area of the application and should be created in the `src/modules/<module-name>` folder.
- When creating modules, you should analyze if existing modules can be reused.
- If its a new module, you should create it in the `src/modules` folder.

### View

- Views are the components that are responsible for the presentation of the module. Basically every page is a view and should be created in the `src/modules/<module-name>/view` folder.

### Service

- Services are responsible for the api communication and should be created in the `src/modules/<module-name>/service` folder.
- There are two types of services:
  - Service: class with static methods that are responsible for the api communication. Created in the `src/modules/<module-name>/service/<module-name>Service.ts` folder.
  - Service Hook: custom hooks that uses methods of the service class with tanstack query as a superset of those service methods. Created in the `src/modules/<module-name>/service/<module-name>Service.hooks.ts` folder.

### Types

- Types are responsible for the types of the module and should be created in the `src/modules/<module-name>/types` folder.
